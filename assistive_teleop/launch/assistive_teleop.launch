<launch>

    <include file="$(find pr2_machine)/$(env ROBOT).machine" />

    <!-- Arduino Control Board for powering Shaver -->
    <node
        name="tool_power_toggle"
        pkg="rosserial_python"
        type="serial_node.py"
        args="/dev/ttyUSB1"
        output="screen"/>
  
    <!-- NetFt Sensor-->
        <!-- Launch sensor -->
        <include file="$(find hrl_netft)/launch/tool_razor_inline_zeroed.launch" />
        <!-- Throttle feedback to interface -->
        <node
            name="throttle_wt_force_out"
            pkg="topic_tools"
            type="throttle"
            args="messages /netft_gravity_zeroing/wrench_zeroed 8 /wt_force_out_throttle" />
 
    <!-- JTTask Controller load
    <include file="$(find assistive_teleop)/launch/c_jtask_mod.launch" />
    -->

    <!-- Cart Move Servers
    <node
        ns="r_cart"
        name="ft_move_action_server"
        pkg="assistive_teleop"
        type="ft_move_action_server.py"
        output="screen"
        machine="c2"/>
    <node
        ns="l_cart"
        name="ft_move_action_server"
        pkg="assistive_teleop"
        type="ft_move_action_server.py"
        output="screen"
        machine="c2"/>
    -->
    <node
        name="ft_hold_server"
        pkg="assistive_teleop"
        type="ft_hold_as.py"
        output="screen"
        machine="c2"/>

    <!--Tabletop Manipulation Content, i.e. Arm Navigation etc
    <group>
        <remap from="camera" to="kinect_head"/>
        <remap from="camera/rgb/camera_info" to="kinect_head/rgb/camera_info"/>
        <include file="$(find pr2_tabletop_manipulation_launch)/launch/pr2_tabletop_manipulation.launch">
            <arg name="stereo" value="true"/>
            <arg name="use_slip_controllers" value="false"/>
            <arg name="use_right_arm" value="true"/>
            <arg name="use_left_arm" value="true"/>
            <arg name="use_task_cartesian" default="false"/>
        </include>
    </group>
    -->

    <!-- Bring up intermediary for handling arm movements, one for each arm 
    <node
        name="wt_left_arm"
        pkg="assistive_teleop"
        type="arm_intermediary.py"
        args="left"
        output="screen"
        machine="c2"/>
    <node
        name="wt_right_arm"
        pkg="assistive_teleop"
        type="arm_intermediary.py"
        args="right"
        output="screen"
        machine="c2"/>
    -->

    <!-- Launch Image Rotation Nodes for forearm cameras-->
    <node
        name="image_rotater_right"
        pkg="image_rotate"
        type="image_rotate"
        machine = "c2"> 
        <remap 
            from="image"
            to="/r_forearm_cam/image_color"/>
        <remap 
            from="rotated/image"
            to="/r_forearm_cam/image_color_rotated"/>
    </node>
    <node
        name="image_rotater_left"
        pkg="image_rotate"
        type="image_rotate"
        machine="c2"> 
        <remap
            from="image"
            to="/l_forearm_cam/image_color"/>
        <remap
            from="rotated/image"
            to="/l_forearm_cam/image_color_rotated"/>
    </node>

    <!-- Speech node -->
    <node 
        pkg ="assistive_teleop"
        type="speech_intermediary.py"
        name="wt_speech_intermediary">
        <param 
            name="voice" 
            value="voice_nitech_us_rms_arctic_hts"/>
    </node>

    <!-- Launch Kinect with GT launch files (gt-ros-pkg)-->
    <include file="$(find hrl_pr2_lib)/launch/openni_kinect_polled.launch" />
    
    <!--3d point from Pixel Node-->
    <node 
        pkg="pixel_2_3d"
        type="pixel_2_3d"
        name="pixel_2_3d"
        machine="c2" >
            <remap
                from="image"
                to="/kinect_head/rgb/image_color" />
            <remap
                from="point_cloud"
                to="/kinect_head/rgb/points" />
            <param 
                name="normal_radius" 
                type="double" 
                value="0.035" />
            <param 
                name="use_closest_pixel" 
                value="True"/>
    </node>

    <!-- Arrow overlay -->
    <node 
        pkg="hrl_clickable_display" 
        type="arrow_overlay"
        name="arrow_overlay" 
        respawn="true" 
        machine="c2" 
        output="screen">
            <remap
                from="/image_in"
                to="/kinect_head/rgb/image_color" />
        <remap 
            from="/image_out"
            to="/arrow_overlaid" />
        <param
            name="shaft_size"
            type="double"
            value="0.1" />
        <param
            name="head_width"
            type="double"
            value="0.03" />
        <param 
            name="head_length"
            type="double"
            value="0.03" />
        <param
            name="debug_mode"
            type="bool"
            value="true" />
        <param
            name="auto_clear"
            type="bool"
            value="true" />
    </node>

    <!-- Throttling nodes for the topics used by the interface -->	
    <node 
        name="throttle_head_traj_controller_state"
        pkg="topic_tools" 
        type="throttle"
        args="messages /head_traj_controller/state 8 /head_traj_controller_state_throttle" />
    <node 
        name="throttle_torso_position_controller_state"
        pkg="topic_tools"
        type="throttle"
        args="messages /torso_controller/state 2 /torso_state_throttle" />
    <node 
        name="throttle_r_gripper_controller_state" 
        pkg="topic_tools" 
        type="throttle"
        args="messages /r_gripper_controller/state 1 /r_gripper_controller_state_throttle" />
    <node
        name="throttle_l_gripper_controller_state" 
        pkg="topic_tools" 
        type="throttle" 
        args="messages /l_gripper_controller/state 1 /l_gripper_controller_state_throttle" />
    <node 
        name="throttle_r_arm_joints_state" 
        pkg="topic_tools" 
        type="throttle" 
        args="messages /r_arm_controller/state 8 /r_arm_controller_state_throttle" />
    <node 
        name="throttle_l_arm_joints_state" 
        pkg="topic_tools" 
        type="throttle" 
        args="messages /l_arm_controller/state 8 /l_arm_controller_state_throttle" />

    <!-- Launch mjpeg server, used for sending image streams -->
    <node 
        name="mjpeg_server" 
        pkg="mjpeg_server" 
        type="mjpeg_server"  
        machine="c1" 
        output="screen">
            <param
                name="port"
                type="int"
                value="8080" />
    </node>

    <!-- Set port to 9091, start rosbridge -->
        <param 
            name="/brown/rosbridge/port"
            type="int"
            value="9091" />
    <node 
        name="rosbridge" 
        pkg="rosbridge" 
        type="rosbridge.py" 
        machine="c1" 
        output="screen"/>

</launch>
