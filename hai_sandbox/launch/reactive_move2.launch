<launch>
    <include file="$(find pr2_machine)/$(env ROBOT).machine" />
    <include file="$(find gt_pr2)/aware_2dnav.launch"/>

    <!-- IK and FK -->
    <!-- env server, not really needed for now.
        <include file="$(find pr2_arm_navigation_actions)/launch/environment_server_left_arm.launch"/>
        <include file="$(find pr2_arm_navigation_actions)/launch/environment_server_right_arm.launch"/>
    -->
    <include file="$(find hai_sandbox)/launch/right_arm_collision_free_ik.launch"/>
    <include file="$(find hai_sandbox)/launch/left_arm_collision_free_ik.launch"/>

    <!-- Reactive Grasping Controllers -->
    <include file="$(find pr2_gripper_sensor_action)/launch/pr2_gripper_sensor_actions.launch"/>

    <!-- Point clouds -->
    <node ns="prosilica" pkg="image_proc" type="image_proc" respawn="true" name="prosilica_image_proc"/>

    <node pkg="laser_filters" type="scan_to_cloud_filter_chain" respawn="true" machine="c2" name="tilt_shadow_filter_linear_move">
        <remap from="scan" to="tilt_scan" />
        <remap from="cloud_filtered" to="tilt_scan_shadow_filtered_manip" />
        <param name="target_frame" value="base_footprint" />
        <param name="high_fidelity" value="true" />
        <rosparam command="load" file="$(find pr2_navigation_perception)/config/tilt_laser_filters.yaml" />
        <rosparam command="load" file="$(find pr2_navigation_perception)/config/point_cloud_footprint_filter.yaml" />
    </node>

    <node pkg="laser_assembler" type="point_cloud_assembler" name="point_cloud_assembler_linear_move" machine="c2" respawn="true" output="screen" >
        <remap from="cloud" to="tilt_scan_shadow_filtered_manip"/>
        <param name="fixed_frame" type="string" value="/base_link" />
        <param name="max_clouds" type="int" value="1000"/>
    </node>

    <node pkg="pr2_arm_navigation_perception" type="point_cloud_srv" respawn="true" machine="c2" name="point_cloud_srv_linear_move" >
        <remap from="laser_scan_assembler/build_cloud" to="assemble_scans"/>
    </node>

    <node name="fpfh_fx" pkg="feature_extractor_fpfh" type="fpfh_node" machine="c2"/>
    <node pkg="hrl_pr2_lib" type="move_base_server.py" name="move_base_server"/>
    <node name="$(anon dynam_load)" pkg="hrl_lib" type="load_dynamic_config" 
          args="/narrow_stereo_textured/narrow_stereo_textured_proc $(find hai_sandbox)/launch/narrow_stereo_manip.yaml"/>

    <!--
        <remap from="image" to="/camera/rgb/image_color"/>
        <remap from="points2" to="/camera/depth/points2"/>
    </node>
    <include file="$(find hai_sandbox)/launch/openni_kinect.launch"/>
    -->
</launch>














    <!-- For getting point clouds -->
    <!--
    <include file="$(find gt_pr2)/machine.launch"/>
    <node pkg="laser_assembler" type="point_cloud_assembler" name="point_cloud_assembler_linear_move" respawn="true" output="screen" >
        <remap from="cloud" to="tilt_scan_shadow_filtered"/>
        <param name="fixed_frame" type="string" value="/base_link" />
        <param name="max_clouds" type="int" value="1000"/>
    </node>
    <node pkg="pr2_arm_navigation_perception" type="point_cloud_srv" respawn="true" name="point_cloud_srv_linear_move" >
        <remap from="laser_scan_assembler/build_cloud" to="assemble_scans"/>
    </node>
    -->
    <!--
    <include file="$(find pr2_arm_navigation_actions)/launch/environment_server_left_arm.launch"/>
    <include file="$(find pr2_arm_navigation_actions)/launch/environment_server_right_arm.launch"/>
    -->
    <!-- <node ns="prosilica" pkg="image_proc" type="image_proc" respawn="true" name="prosilica_image_proc"/> -->
    <!-- <remap from="cloud" to="tilt_scan_filtered"/> -->
    <!--
    <include file="$(find pr2_arm_navigation_perception)/launch/laser-perception.launch"/>
    -->
    <!--
    <include file="$(find pr2_arm_navigation_kinematics)/launch/right_arm_collision_free_ik.launch"/>
    <include file="$(find pr2_arm_navigation_kinematics)/launch/left_arm_collision_free_ik.launch"/>
    <node pkg="hrl_pr2_lib" type="collision_monitor.py" name="collision_monitor_left" args="l"/>
    <node pkg="hrl_pr2_lib" type="collision_monitor.py" name="collision_monitor_right" args="r"/>
    -->
